steps:
  - label: ":mysql: Execute Database Queries"
    key: "execute-queries"
    command: |
      echo "Setting up environment..."
      pip install -r requirements.txt

      echo "Checking for query files..."
      if [ -f "queries/mysql_queries.sql" ]; then
        echo "Executing MySQL queries..."
        python request_creds_and_run.py mysql queries/mysql_queries.sql --output mysql_results.json
      fi

      if [ -f "queries/mongodb_queries.json" ]; then
        echo "Executing MongoDB queries..."
        python request_creds_and_run.py mongodb queries/mongodb_queries.json --output mongodb_results.json
      fi

      echo "Query execution completed"

    artifact_paths:
      - "*_results.json"
      - "*.log"

    env:
      VAULT_ADDR: "http://localhost:8200"
      VAULT_TOKEN: "root-token"

    timeout_in_minutes: 10

    retry:
      automatic:
        - exit_status: "*"
          limit: 1

  - wait

  - label: ":memo: Process Results"
    key: "process-results"
    depends_on: "execute-queries"
    command: |
      echo "Processing query execution results..."

      # Download artifacts from previous step
      buildkite-agent artifact download "*_results.json" .

      # Process results and generate summary
      python -c "
      import json
      import glob
      import os

      result_files = glob.glob('*_results.json')
      total_queries = 0
      failed_queries = 0

      for file in result_files:
          with open(file, 'r') as f:
              data = json.load(f)

          queries = data.get('queries', [])
          total_queries += len(queries)
          failed_queries += len([q for q in queries if q.get('status') == 'error'])

      summary = {
          'total_queries': total_queries,
          'failed_queries': failed_queries,
          'success_rate': ((total_queries - failed_queries) / total_queries * 100) if total_queries > 0 else 0
      }

      with open('execution_summary.json', 'w') as f:
          json.dump(summary, f, indent=2)

      print(f'Execution Summary: {summary}')
      "

      # Check if any queries failed and set appropriate exit code
      python -c "
      import json
      with open('execution_summary.json', 'r') as f:
          summary = json.load(f)

      if summary['failed_queries'] > 0:
          print(f'WARNING: {summary[\"failed_queries\"]} queries failed!')
          exit(1)
      else:
          print('All queries executed successfully!')
      "

    artifact_paths:
      - "execution_summary.json"

    timeout_in_minutes: 5

  # Developer Access Pipeline - Triggered manually or via API
  - label: ":key: Grant Developer Database Access"
    key: "developer-access"
    command: |
      echo "üîê Processing developer database access request..."

      # Check for required environment variables
      if [[ -z "$DEV_EMAIL" || -z "$DATABASE_TYPE" || -z "$JUSTIFICATION" ]]; then
        echo "‚ùå Missing required environment variables:"
        echo "   DEV_EMAIL: Developer's email address"
        echo "   DATABASE_TYPE: mysql or mongodb"
        echo "   JUSTIFICATION: Business reason for access"
        exit 1
      fi

      echo "üìã Access Request Details:"
      echo "   Developer: $DEV_EMAIL"
      echo "   Database: $DATABASE_TYPE"
      echo "   Reason: $JUSTIFICATION"

      # Install dependencies
      pip install -r requirements.txt

      # Generate ephemeral credentials and PrivateBin link
      python developer_access.py \
        "$DATABASE_TYPE" \
        "$DEV_EMAIL" \
        "$JUSTIFICATION" \
        --vault-url "$VAULT_ADDR" \
        --privatebin-url "http://localhost:8080" \
        --slack-webhook "$SLACK_WEBHOOK_URL" > access_result.json

      # Display result
      echo "üéâ Access granted! Details:"
      cat access_result.json

      echo ""
      echo "üîó Secure credential link has been sent via Slack DM"
      echo "‚è∞ Credentials will auto-expire in 1 hour"
      echo "üîç All access is logged for security audit"

    artifact_paths:
      - "access_result.json"
      - "access_requests_*.log"

    env:
      VAULT_ADDR: "http://localhost:8200"
      VAULT_TOKEN: "root-token"
      # These should be set when triggering the build:
      # DEV_EMAIL: "developer@company.com"
      # DATABASE_TYPE: "mysql" or "mongodb"
      # JUSTIFICATION: "Bug investigation for ticket #123"
      # SLACK_WEBHOOK_URL: "https://hooks.slack.com/services/..."

    timeout_in_minutes: 5

    # This step only runs when manually triggered with developer access request
    if: build.env("DEV_EMAIL") != null

  # Audit and Cleanup Job
  - label: ":mag: Security Audit & Cleanup"
    key: "security-audit"
    command: |
      echo "üîç Running security audit and cleanup..."

      # Install dependencies
      pip install -r requirements.txt

      # Generate audit report
      python -c "
      import json
      import glob
      from datetime import datetime, timedelta

      print('=== VAULT LEASE AUDIT ===')

      # Check for any active leases (this would integrate with Vault API in production)
      print('Active ephemeral database users: TBD (requires Vault audit log integration)')

      # Check access request logs
      log_files = glob.glob('access_requests_*.log')
      if log_files:
          print(f'Found {len(log_files)} access request log files')

          total_requests = 0
          for log_file in log_files:
              with open(log_file, 'r') as f:
                  lines = f.readlines()
                  total_requests += len(lines)

          print(f'Total access requests logged: {total_requests}')

      print('=== AUDIT COMPLETE ===')
      "

      echo "‚úÖ Security audit completed"

    artifact_paths:
      - "access_requests_*.log"

    timeout_in_minutes: 3

    # Run audit after other jobs complete
    depends_on:
      - "process-results"